-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity controller is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    packet2host_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    packet2host_V_TVALID : OUT STD_LOGIC;
    packet2host_V_TREADY : IN STD_LOGIC;
    daco2controller_V : IN STD_LOGIC_VECTOR (27 downto 0);
    packet2daco_V : OUT STD_LOGIC_VECTOR (27 downto 0);
    packet2daco_V_ap_vld : OUT STD_LOGIC;
    config_out_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    config_out_V_ap_vld : OUT STD_LOGIC;
    daco2controller_ack : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of controller is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "controller,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.959000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=154,HLS_SYN_LUT=253}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_rst_n_inv : STD_LOGIC;
    signal config_V : STD_LOGIC_VECTOR (1 downto 0);
    signal packet2controller_V : STD_LOGIC_VECTOR (27 downto 0);
    signal packet2host_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal packet2host_V_1_vld_in : STD_LOGIC;
    signal packet2host_V_1_vld_out : STD_LOGIC;
    signal packet2host_V_1_ack_in : STD_LOGIC;
    signal packet2host_V_1_ack_out : STD_LOGIC;
    signal packet2host_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal packet2host_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal packet2host_V_1_sel_rd : STD_LOGIC := '0';
    signal packet2host_V_1_sel_wr : STD_LOGIC := '0';
    signal packet2host_V_1_sel : STD_LOGIC;
    signal packet2host_V_1_load_A : STD_LOGIC;
    signal packet2host_V_1_load_B : STD_LOGIC;
    signal packet2host_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal packet2host_V_1_state_cmp_full : STD_LOGIC;
    signal controller2host_ack : STD_LOGIC;
    signal controller2host_ack_ap_vld : STD_LOGIC;
    signal packet2daco_vld : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal packet2host_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_3_fu_150_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_io : BOOLEAN;
    signal tmp_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_124_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_config_out_V_dummy_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_controller2host_ack_dummy_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_packet2daco_V_dummy_ack : STD_LOGIC := '0';
    signal ap_block_state2_io : BOOLEAN;
    signal or_cond_fu_138_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_condition_182 : BOOLEAN;
    signal ap_condition_180 : BOOLEAN;
    signal ap_condition_159 : BOOLEAN;

    component controller_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        config_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        packet2controller_V : OUT STD_LOGIC_VECTOR (27 downto 0);
        controller2host_ack : IN STD_LOGIC;
        controller2host_ack_ap_vld : IN STD_LOGIC );
    end component;



begin
    controller_AXILiteS_s_axi_U : component controller_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        config_V => config_V,
        packet2controller_V => packet2controller_V,
        controller2host_ack => controller2host_ack,
        controller2host_ack_ap_vld => controller2host_ack_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_config_out_V_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_config_out_V_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ap_const_boolean_0 = ap_block_state1_io)) then 
                        ap_reg_ioackin_config_out_V_dummy_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                        ap_reg_ioackin_config_out_V_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_controller2host_ack_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_controller2host_ack_dummy_ack <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_io) and (((tmp_1_fu_118_p2 = ap_const_lv1_1) and (or_cond_fu_138_p2 = ap_const_lv1_0)) or ((tmp_1_fu_118_p2 = ap_const_lv1_1) and (tmp_2_fu_124_p1 = ap_const_lv1_0)))) or ((or_cond_fu_138_p2 = ap_const_lv1_1) and (tmp_2_fu_124_p1 = ap_const_lv1_1) and (tmp_1_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_io)))) then 
                    ap_reg_ioackin_controller2host_ack_dummy_ack <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_const_logic_1) and (((tmp_1_fu_118_p2 = ap_const_lv1_1) and (or_cond_fu_138_p2 = ap_const_lv1_0)) or ((tmp_1_fu_118_p2 = ap_const_lv1_1) and (tmp_2_fu_124_p1 = ap_const_lv1_0)))) or ((or_cond_fu_138_p2 = ap_const_lv1_1) and (tmp_2_fu_124_p1 = ap_const_lv1_1) and (tmp_1_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_const_logic_1)))) then 
                    ap_reg_ioackin_controller2host_ack_dummy_ack <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_packet2daco_V_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_packet2daco_V_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_182)) then
                    if ((ap_const_boolean_0 = ap_block_state1_io)) then 
                        ap_reg_ioackin_packet2daco_V_dummy_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                        ap_reg_ioackin_packet2daco_V_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    packet2host_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packet2host_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((packet2host_V_1_ack_out = ap_const_logic_1) and (packet2host_V_1_vld_out = ap_const_logic_1))) then 
                                        packet2host_V_1_sel_rd <= not(packet2host_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    packet2host_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packet2host_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((packet2host_V_1_ack_in = ap_const_logic_1) and (packet2host_V_1_vld_in = ap_const_logic_1))) then 
                                        packet2host_V_1_sel_wr <= not(packet2host_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    packet2host_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packet2host_V_1_state <= ap_const_lv2_0;
            else
                if ((((packet2host_V_1_vld_in = ap_const_logic_0) and (packet2host_V_1_state = ap_const_lv2_2)) or ((packet2host_V_1_vld_in = ap_const_logic_0) and (packet2host_V_1_state = ap_const_lv2_3) and (packet2host_V_1_ack_out = ap_const_logic_1)))) then 
                    packet2host_V_1_state <= ap_const_lv2_2;
                elsif ((((packet2host_V_1_ack_out = ap_const_logic_0) and (packet2host_V_1_state = ap_const_lv2_1)) or ((packet2host_V_1_ack_out = ap_const_logic_0) and (packet2host_V_1_state = ap_const_lv2_3) and (packet2host_V_1_vld_in = ap_const_logic_1)))) then 
                    packet2host_V_1_state <= ap_const_lv2_1;
                elsif (((not(((packet2host_V_1_vld_in = ap_const_logic_0) and (packet2host_V_1_ack_out = ap_const_logic_1))) and not(((packet2host_V_1_ack_out = ap_const_logic_0) and (packet2host_V_1_vld_in = ap_const_logic_1))) and (packet2host_V_1_state = ap_const_lv2_3)) or ((packet2host_V_1_state = ap_const_lv2_1) and (packet2host_V_1_ack_out = ap_const_logic_1)) or ((packet2host_V_1_state = ap_const_lv2_2) and (packet2host_V_1_vld_in = ap_const_logic_1)))) then 
                    packet2host_V_1_state <= ap_const_lv2_3;
                else 
                    packet2host_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_138_p2 = ap_const_lv1_1) and (tmp_2_fu_124_p1 = ap_const_lv1_1) and (tmp_1_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_io))) then
                packet2daco_vld <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((packet2host_V_1_load_A = ap_const_logic_1)) then
                packet2host_V_1_payload_A <= tmp_fu_154_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((packet2host_V_1_load_B = ap_const_logic_1)) then
                packet2host_V_1_payload_B <= tmp_fu_154_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_io))) then
                tmp_3_reg_168 <= tmp_3_fu_150_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (packet2host_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state1_io, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (packet2host_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_io_assign_proc : process(packet2host_V_1_ack_in, tmp_3_fu_150_p1)
    begin
                ap_block_state1_io <= ((tmp_3_fu_150_p1 = ap_const_lv1_1) and (packet2host_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(packet2host_V_1_ack_in, tmp_3_reg_168)
    begin
                ap_block_state2_io <= ((tmp_3_reg_168 = ap_const_lv1_1) and (packet2host_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_159_assign_proc : process(tmp_1_fu_118_p2, tmp_2_fu_124_p1, or_cond_fu_138_p2)
    begin
                ap_condition_159 <= ((or_cond_fu_138_p2 = ap_const_lv1_1) and (tmp_2_fu_124_p1 = ap_const_lv1_1) and (tmp_1_fu_118_p2 = ap_const_lv1_1));
    end process;


    ap_condition_180_assign_proc : process(tmp_1_fu_118_p2, tmp_2_fu_124_p1, or_cond_fu_138_p2)
    begin
                ap_condition_180 <= (((tmp_1_fu_118_p2 = ap_const_lv1_1) and (or_cond_fu_138_p2 = ap_const_lv1_0)) or ((tmp_1_fu_118_p2 = ap_const_lv1_1) and (tmp_2_fu_124_p1 = ap_const_lv1_0)));
    end process;


    ap_condition_182_assign_proc : process(ap_CS_fsm_state1, tmp_1_fu_118_p2, tmp_2_fu_124_p1, or_cond_fu_138_p2)
    begin
                ap_condition_182 <= ((or_cond_fu_138_p2 = ap_const_lv1_1) and (tmp_2_fu_124_p1 = ap_const_lv1_1) and (tmp_1_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    config_out_V <= config_V;

    config_out_V_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_reg_ioackin_config_out_V_dummy_ack)
    begin
        if (((ap_reg_ioackin_config_out_V_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_out_V_ap_vld <= ap_const_logic_1;
        else 
            config_out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    controller2host_ack_assign_proc : process(ap_CS_fsm_state1, ap_condition_180, ap_condition_159)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_boolean_1 = ap_condition_159)) then 
                controller2host_ack <= ap_const_logic_1;
            elsif ((ap_const_boolean_1 = ap_condition_180)) then 
                controller2host_ack <= ap_const_logic_0;
            else 
                controller2host_ack <= 'X';
            end if;
        else 
            controller2host_ack <= 'X';
        end if; 
    end process;


    controller2host_ack_ap_vld_assign_proc : process(ap_CS_fsm_state1, tmp_1_fu_118_p2, tmp_2_fu_124_p1, or_cond_fu_138_p2, ap_reg_ioackin_controller2host_ack_dummy_ack)
    begin
        if ((((ap_reg_ioackin_controller2host_ack_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((tmp_1_fu_118_p2 = ap_const_lv1_1) and (or_cond_fu_138_p2 = ap_const_lv1_0)) or ((tmp_1_fu_118_p2 = ap_const_lv1_1) and (tmp_2_fu_124_p1 = ap_const_lv1_0)))) or ((or_cond_fu_138_p2 = ap_const_lv1_1) and (tmp_2_fu_124_p1 = ap_const_lv1_1) and (tmp_1_fu_118_p2 = ap_const_lv1_1) and (ap_reg_ioackin_controller2host_ack_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            controller2host_ack_ap_vld <= ap_const_logic_1;
        else 
            controller2host_ack_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_138_p0 <= (0=>daco2controller_ack, others=>'-');
    or_cond_fu_138_p2 <= (p_not_fu_132_p2 or or_cond_fu_138_p0);
    p_not_fu_132_p2 <= (packet2daco_vld xor ap_const_lv1_1);
    packet2daco_V <= packet2controller_V;

    packet2daco_V_ap_vld_assign_proc : process(ap_CS_fsm_state1, tmp_1_fu_118_p2, tmp_2_fu_124_p1, or_cond_fu_138_p2, ap_reg_ioackin_packet2daco_V_dummy_ack)
    begin
        if (((or_cond_fu_138_p2 = ap_const_lv1_1) and (tmp_2_fu_124_p1 = ap_const_lv1_1) and (tmp_1_fu_118_p2 = ap_const_lv1_1) and (ap_reg_ioackin_packet2daco_V_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            packet2daco_V_ap_vld <= ap_const_logic_1;
        else 
            packet2daco_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    packet2host_V_1_ack_in <= packet2host_V_1_state(1);
    packet2host_V_1_ack_out <= packet2host_V_TREADY;

    packet2host_V_1_data_out_assign_proc : process(packet2host_V_1_payload_A, packet2host_V_1_payload_B, packet2host_V_1_sel)
    begin
        if ((packet2host_V_1_sel = ap_const_logic_1)) then 
            packet2host_V_1_data_out <= packet2host_V_1_payload_B;
        else 
            packet2host_V_1_data_out <= packet2host_V_1_payload_A;
        end if; 
    end process;

    packet2host_V_1_load_A <= (packet2host_V_1_state_cmp_full and not(packet2host_V_1_sel_wr));
    packet2host_V_1_load_B <= (packet2host_V_1_state_cmp_full and packet2host_V_1_sel_wr);
    packet2host_V_1_sel <= packet2host_V_1_sel_rd;
    packet2host_V_1_state_cmp_full <= '0' when (packet2host_V_1_state = ap_const_lv2_1) else '1';

    packet2host_V_1_vld_in_assign_proc : process(ap_CS_fsm_state1, tmp_3_fu_150_p1, ap_block_state1_io)
    begin
        if (((tmp_3_fu_150_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_io))) then 
            packet2host_V_1_vld_in <= ap_const_logic_1;
        else 
            packet2host_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    packet2host_V_1_vld_out <= packet2host_V_1_state(0);
    packet2host_V_TDATA <= packet2host_V_1_data_out;

    packet2host_V_TDATA_blk_n_assign_proc : process(packet2host_V_1_state, ap_CS_fsm_state1, tmp_3_fu_150_p1, ap_CS_fsm_state2, tmp_3_reg_168)
    begin
        if ((((tmp_3_fu_150_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_3_reg_168 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            packet2host_V_TDATA_blk_n <= packet2host_V_1_state(1);
        else 
            packet2host_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    packet2host_V_TVALID <= packet2host_V_1_state(0);
    tmp_1_fu_118_p2 <= "1" when (config_V = ap_const_lv2_1) else "0";
    tmp_2_fu_124_p1 <= packet2controller_V(1 - 1 downto 0);
    tmp_3_fu_150_p1 <= daco2controller_V(1 - 1 downto 0);
    tmp_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(daco2controller_V),32));
end behav;
