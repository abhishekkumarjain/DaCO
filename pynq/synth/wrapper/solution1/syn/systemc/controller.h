// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _controller_HH_
#define _controller_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "controller_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct controller : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<32> > packet2host_V_TDATA;
    sc_out< sc_logic > packet2host_V_TVALID;
    sc_in< sc_logic > packet2host_V_TREADY;
    sc_in< sc_lv<28> > daco2controller_V;
    sc_out< sc_lv<28> > packet2daco_V;
    sc_out< sc_logic > packet2daco_V_ap_vld;
    sc_out< sc_lv<2> > config_out_V;
    sc_out< sc_logic > config_out_V_ap_vld;
    sc_in< sc_logic > daco2controller_ack;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    controller(sc_module_name name);
    SC_HAS_PROCESS(controller);

    ~controller();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    controller_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* controller_AXILiteS_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<2> > config_V;
    sc_signal< sc_lv<28> > packet2controller_V;
    sc_signal< sc_lv<32> > packet2host_V_1_data_out;
    sc_signal< sc_logic > packet2host_V_1_vld_in;
    sc_signal< sc_logic > packet2host_V_1_vld_out;
    sc_signal< sc_logic > packet2host_V_1_ack_in;
    sc_signal< sc_logic > packet2host_V_1_ack_out;
    sc_signal< sc_lv<32> > packet2host_V_1_payload_A;
    sc_signal< sc_lv<32> > packet2host_V_1_payload_B;
    sc_signal< sc_logic > packet2host_V_1_sel_rd;
    sc_signal< sc_logic > packet2host_V_1_sel_wr;
    sc_signal< sc_logic > packet2host_V_1_sel;
    sc_signal< sc_logic > packet2host_V_1_load_A;
    sc_signal< sc_logic > packet2host_V_1_load_B;
    sc_signal< sc_lv<2> > packet2host_V_1_state;
    sc_signal< sc_logic > packet2host_V_1_state_cmp_full;
    sc_signal< sc_logic > controller2host_ack;
    sc_signal< sc_logic > controller2host_ack_ap_vld;
    sc_signal< sc_lv<1> > packet2daco_vld;
    sc_signal< sc_logic > packet2host_V_TDATA_blk_n;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > tmp_3_fu_150_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_3_reg_168;
    sc_signal< bool > ap_block_state1_io;
    sc_signal< sc_lv<32> > tmp_fu_154_p1;
    sc_signal< sc_lv<1> > tmp_1_fu_118_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_124_p1;
    sc_signal< sc_lv<1> > or_cond_fu_138_p2;
    sc_signal< sc_logic > ap_reg_ioackin_config_out_V_dummy_ack;
    sc_signal< sc_logic > ap_reg_ioackin_controller2host_ack_dummy_ack;
    sc_signal< sc_logic > ap_reg_ioackin_packet2daco_V_dummy_ack;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<1> > or_cond_fu_138_p0;
    sc_signal< sc_lv<1> > p_not_fu_132_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< bool > ap_condition_182;
    sc_signal< bool > ap_condition_180;
    sc_signal< bool > ap_condition_159;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1_io();
    void thread_ap_block_state2_io();
    void thread_ap_condition_159();
    void thread_ap_condition_180();
    void thread_ap_condition_182();
    void thread_ap_rst_n_inv();
    void thread_config_out_V();
    void thread_config_out_V_ap_vld();
    void thread_controller2host_ack();
    void thread_controller2host_ack_ap_vld();
    void thread_or_cond_fu_138_p0();
    void thread_or_cond_fu_138_p2();
    void thread_p_not_fu_132_p2();
    void thread_packet2daco_V();
    void thread_packet2daco_V_ap_vld();
    void thread_packet2host_V_1_ack_in();
    void thread_packet2host_V_1_ack_out();
    void thread_packet2host_V_1_data_out();
    void thread_packet2host_V_1_load_A();
    void thread_packet2host_V_1_load_B();
    void thread_packet2host_V_1_sel();
    void thread_packet2host_V_1_state_cmp_full();
    void thread_packet2host_V_1_vld_in();
    void thread_packet2host_V_1_vld_out();
    void thread_packet2host_V_TDATA();
    void thread_packet2host_V_TDATA_blk_n();
    void thread_packet2host_V_TVALID();
    void thread_tmp_1_fu_118_p2();
    void thread_tmp_2_fu_124_p1();
    void thread_tmp_3_fu_150_p1();
    void thread_tmp_fu_154_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
